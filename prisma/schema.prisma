generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Channels {
  id            Int             @id @default(autoincrement())
  name          String
  tagName       String          @unique
  des           String          @default("")
  accountId     Int             @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  streamKey     String          @unique
  live          Boolean         @default(false)
  account       Accounts        @relation(fields: [accountId], references: [id])
  ListVideo     ListVideo[]
  Media         Media[]
  Notifications Notifications[]
  Posts         Posts?
  Subcribes     Subcribes[]
}

model Media {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(45)
  des             String            @db.VarChar(45)
  status          Int               @default(0)
  channelId       Int
  view            Int               @default(0)
  createdTime     DateTime          @default(now()) @db.DateTime(0)
  endTime         DateTime?         @db.DateTime(0)
  isLive          Boolean?          @default(false)
  mediaType       Int
  link            String
  updatedAt       DateTime          @updatedAt
  Comment         Comment[]
  DetailListVideo DetailListVideo[]
  DetailTags      DetailTags?
  Likes           Likes[]
  Channels        Channels          @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channelId")

  @@index([channelId], map: "channelId")
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String
}

model Comment {
  id          Int       @id @default(autoincrement())
  accountId   Int
  content     String
  status      Int
  referenceId Int?      @map("referenceId")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mediaId     Int
  account     Accounts  @relation(fields: [accountId], references: [id])
  media       Media     @relation(fields: [mediaId], references: [id])
  reference   Comment?  @relation("ParentComment", fields: [referenceId], references: [id])
  comments    Comment[] @relation("ParentComment")

  @@index([accountId], map: "Comment_accountId_fkey")
  @@index([referenceId], map: "Comment_referenceId_fkey")
  @@index([mediaId], map: "Comment_mediaId_fkey")
}

model ListVideo {
  id              Int               @id @default(autoincrement())
  channelId       Int
  name            String            @default("")
  DetailListVideo DetailListVideo[]
  channel         Channels          @relation(fields: [channelId], references: [id])

  @@index([channelId], map: "ListVideo_channelId_fkey")
}

model DetailListVideo {
  id      Int       @id @default(autoincrement())
  listId  Int
  mediaId Int
  list    ListVideo @relation(fields: [listId], references: [id])
  media   Media     @relation(fields: [mediaId], references: [id])

  @@index([listId], map: "DetailListVideo_listId_fkey")
  @@index([mediaId], map: "DetailListVideo_mediaId_fkey")
}

model Tags {
  id         Int         @id @unique @default(autoincrement())
  name       String
  DetailTags DetailTags?
}

model DetailTags {
  id      Int   @id @unique @default(autoincrement())
  tagId   Int   @unique
  mediaId Int   @unique
  media   Media @relation(fields: [mediaId], references: [id])
  tag     Tags  @relation(fields: [tagId], references: [id])
}

model Likes {
  id        Int      @id @default(autoincrement())
  accountId Int
  type      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mediaId   Int
  account   Accounts @relation(fields: [accountId], references: [id])
  media     Media    @relation(fields: [mediaId], references: [id])

  @@index([accountId], map: "Likes_accountId_fkey")
  @@index([mediaId], map: "Likes_mediaId_fkey")
}

model Notifications {
  id        Int      @id @default(autoincrement())
  accountId Int
  channelId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  account   Accounts @relation(fields: [accountId], references: [id])
  channel   Channels @relation(fields: [channelId], references: [id])

  @@index([accountId], map: "Notifications_accountId_fkey")
  @@index([channelId], map: "Notifications_channelId_fkey")
}

model Subcribes {
  accountId Int
  channelId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Accounts @relation(fields: [accountId], references: [id])
  channel   Channels @relation(fields: [channelId], references: [id])

  @@id([accountId, channelId])
  @@index([channelId], map: "Subcribes_channelId_fkey")
}

model Posts {
  id          Int      @id @unique @default(autoincrement())
  channelId   Int      @unique
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  channel     Channels @relation(fields: [channelId], references: [id])
}

model Room {
  id      Int       @id @default(autoincrement())
  name    String
  Member  Member[]
  Message Message[]
}

model Member {
  id        Int       @id @default(autoincrement())
  roomId    Int
  accountId Int
  name      String
  Account   Accounts  @relation(fields: [accountId], references: [id])
  Room      Room      @relation(fields: [roomId], references: [id])
  Message   Message[]

  @@index([accountId], map: "Member_accountId_fkey")
  @@index([roomId], map: "Member_roomId_fkey")
}

model Message {
  id        Int      @id @default(autoincrement())
  roomId    Int
  memberId  Int
  content   String
  createdAt DateTime @default(now())
  Member    Member   @relation(fields: [memberId], references: [id])
  Room      Room     @relation(fields: [roomId], references: [id])

  @@index([roomId, memberId], map: "Messages_roomId_memberId_unique")
  @@index([memberId], map: "Messages_memberId_fkey")
}

model Accounts {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  password      String
  username      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  streamKey     String          @unique
  channel       Channels?
  comment       Comment[]
  Likes         Likes[]
  Member        Member[]
  Notifications Notifications[]
  Subcribes     Subcribes[]
}
